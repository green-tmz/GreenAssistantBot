package scheduler

import (
	"GreenAssistantBot/internal/bot"
	"GreenAssistantBot/internal/database"
	"GreenAssistantBot/internal/weather"
	"log"
	"os"
	"strconv"
	"time"
)

type Scheduler struct {
	bot            *bot.MessageHandler
	weatherService *weather.WeatherService
}

func NewScheduler(botHandler *bot.MessageHandler) *Scheduler {
	return &Scheduler{
		bot:            botHandler,
		weatherService: weather.NewWeatherService(),
	}
}

// StartWeatherNotifications –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–≥–æ–¥–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
func (s *Scheduler) StartWeatherNotifications() {
	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	go func() {
		for {
			now := time.Now()

			// –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
			hour := 9 // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
			if h := os.Getenv("WEATHER_NOTIFICATION_HOUR"); h != "" {
				if parsedHour, err := strconv.Atoi(h); err == nil {
					hour = parsedHour
				}
			}

			minute := 0 // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
			if m := os.Getenv("WEATHER_NOTIFICATION_MINUTE"); m != "" {
				if parsedMinute, err := strconv.Atoi(m); err == nil {
					minute = parsedMinute
				}
			}

			// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
			nextRun := time.Date(now.Year(), now.Month(), now.Day(), hour, minute, 0, 0, now.Location())
			if now.After(nextRun) {
				nextRun = nextRun.Add(24 * time.Hour)
			}

			// –ñ–¥–µ–º –¥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
			duration := nextRun.Sub(now)
			log.Printf("Next weather notification will be sent at %v (in %v)", nextRun, duration)
			time.Sleep(duration)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
			s.sendWeatherToAllUsers()
		}
	}()
}

// sendWeatherToAllUsers –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func (s *Scheduler) sendWeatherToAllUsers() {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	users, err := database.GetAllUsers()
	if err != nil {
		log.Printf("Error getting users: %v", err)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≥–æ–¥—É –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
	for _, user := range users {
		if user.City != "" && user.WeatherNotifications {
			weatherData, err := s.weatherService.GetWeatherData(user.City)
			if err != nil {
				log.Printf("Error getting weather data for user %d: %v", user.TelegramID, err)
				continue
			}

			text := "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n" + s.weatherService.FormatWeatherMessage(weatherData)
			err = s.bot.SendMessage(user.TelegramID, text, bot.CreateMainMenuKeyboard())
			if err != nil {
				log.Printf("Error sending weather notification to user %d: %v", user.TelegramID, err)
			}
		}
	}
}
