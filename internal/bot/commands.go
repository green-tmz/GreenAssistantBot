package bot

import (
	"GreenAssistantBot/internal/database"
	"GreenAssistantBot/internal/storage"
	"GreenAssistantBot/internal/weather"
	"fmt"
	"log"
	_ "strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	_ "gorm.io/gorm"
)

const (
	StateWaitingForCity          = "waiting_for_city"
	StateWaitingForName          = "waiting_for_name"
	StateChangingNameFromProfile = "changing_name_from_profile"
	StateChangingCityFromProfile = "changing_city_from_profile"
	StateWaitingForWeatherCity   = "waiting_for_weather_city"
)

type MessageHandler struct {
	bot     *tgbotapi.BotAPI
	storage storage.BotStorage
}

func NewMessageHandler(bot *tgbotapi.BotAPI, storage storage.BotStorage) *MessageHandler {
	return &MessageHandler{bot: bot, storage: storage}
}

func (h *MessageHandler) sendMessage(chatID int64, text string, keyboard tgbotapi.ReplyKeyboardMarkup) error {
	msg := tgbotapi.NewMessage(chatID, text)

	if keyboard.Keyboard != nil {
		msg.ReplyMarkup = keyboard
	} else {
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	}

	sentMsg, err := h.bot.Send(msg)
	if err != nil {
		return fmt.Errorf("send message failed: %w", err)
	}

	h.storage.SetLastMessageID(chatID, sentMsg.MessageID)
	h.storage.ClearUserData(chatID)
	return nil
}

func (h *MessageHandler) SendStartMessage(chatID int64) {
	text := `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GreenAssistantBot!

‚ú® –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ`

	h.sendMessage(chatID, text, CreateMainMenuKeyboard())
}

func (h *MessageHandler) AskForName(chatID int64) {
	h.sendMessage(chatID, "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", CreateMainMenuKeyboard())
	h.storage.SetUserState(chatID, StateWaitingForName)
}

func (h *MessageHandler) AskForCity(chatID int64) {
	h.sendMessage(chatID, "üö© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", CreateMainMenuKeyboard())
	h.storage.SetUserState(chatID, StateWaitingForCity)
}

func (h *MessageHandler) CompleteProfile(chatID int64) {
	user, err := database.GetUserByTelegramID(chatID)
	if err != nil {
		log.Printf("Error getting user: %v", err)
		return
	}

	text := fmt.Sprintf("‚úÖ –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!\n\nüë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n‚úèÔ∏è –ò–º—è: %s\nüö© –ì–æ—Ä–æ–¥: %s",
		user.FirstName, user.City)

	h.sendMessage(chatID, text, CreateMainMenuKeyboard())
	h.storage.SetUserState(chatID, "")
}

func (h *MessageHandler) SendProfileSettings(chatID int64) {
	user, err := database.GetUserByTelegramID(chatID)
	if err != nil {
		log.Printf("Error getting user: %v", err)
		return
	}

	text := fmt.Sprintf("üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n‚úèÔ∏è –ò–º—è: %s\nüö© –ì–æ—Ä–æ–¥: %s", user.FirstName, user.City)
	h.sendMessage(chatID, text, CreateProfileMenuKeyboard())
}

func (h *MessageHandler) SendWeather(chatID int64, city string) {
	weatherService := weather.NewWeatherService()
	weatherData, err := weatherService.GetWeatherData(city)

	var text string
	if err != nil {
		text = fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '%s'", city)
	} else {
		text = weatherService.FormatWeatherMessage(weatherData)
	}

	err = h.sendMessage(chatID, text, CreateMainMenuKeyboard())
	if err != nil {
		return
	}
}

func (h *MessageHandler) DeleteLastBotMessage(chatID int64) {
	if messageID, exists := h.storage.GetLastMessageID(chatID); exists {
		deleteConfig := tgbotapi.DeleteMessageConfig{ChatID: chatID, MessageID: messageID}
		h.bot.Request(deleteConfig) // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
	}
}

func (h *MessageHandler) SendMainMenu(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤")
	msg.ReplyMarkup = CreateMainMenuKeyboard()

	_, err := h.bot.Send(msg)
	if err != nil {
		log.Printf("Error sending main menu: %v", err)
	}
}

func (h *MessageHandler) SendSupport(chatID int64) {
	text := `üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:

‚Ä¢ Email: support@example.com
‚Ä¢ –¢–µ–ª–µ–≥—Ä–∞–º: @support_username

–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = CreateMainMenuKeyboard()

	_, err := h.bot.Send(msg)
	if err != nil {
		log.Printf("Error sending support: %v", err)
	}
}

func (h *MessageHandler) SendInfo(chatID int64) {
	text := `üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:

‚Ä¢ –í–µ—Ä—Å–∏—è: 1.0
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç
‚Ä¢ –§—É–Ω–∫—Ü–∏–∏: –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = CreateMainMenuKeyboard()

	_, err := h.bot.Send(msg)
	if err != nil {
		log.Printf("Error sending info: %v", err)
	}
}

func (h *MessageHandler) SendNotificationsSettings(chatID int64) {
	text := `üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:

‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã ‚úÖ
‚Ä¢ –ó–≤—É–∫: –í—ã–∫–ª—é—á–µ–Ω üîá
‚Ä¢ –í–∏–±—Ä–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω–∞ üì≥

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = CreateSettingsMenuKeyboard()

	_, err := h.bot.Send(msg)
	if err != nil {
		log.Printf("Error sending notifications settings: %v", err)
	}
}

func (h *MessageHandler) SendSettingsMenu(chatID int64) {
	text := "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = CreateSettingsMenuKeyboard()

	_, err := h.bot.Send(msg)
	if err != nil {
		log.Printf("Error sending settings menu: %v", err)
	}
}
