package bot

import (
	"GreenAssistantBot/internal/database"
	"GreenAssistantBot/internal/database/models"
	"GreenAssistantBot/internal/storage"
	pmodel "GreenAssistantBot/pkg/models"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type UpdateHandler struct {
	bot          *tgbotapi.BotAPI
	storage      storage.BotStorage
	msgHandler   *MessageHandler
	notesHandler *NotesHandler
}

func NewUpdateHandler(bot *tgbotapi.BotAPI, storage storage.BotStorage) *UpdateHandler {
	msgHandler := NewMessageHandler(bot, storage)
	return &UpdateHandler{
		bot:          bot,
		storage:      storage,
		msgHandler:   msgHandler,
		notesHandler: NewNotesHandler(bot, storage, msgHandler),
	}
}

func (h *UpdateHandler) handleUserState(chatID int64, state, userText, userName, lastName string, update tgbotapi.Update) bool {
	log.Printf("handleUserState: chatID=%d, state=%s, userText=%s", chatID, state, userText)

	switch state {
	case StateWaitingForName:
		user := &models.User{TelegramID: chatID, FirstName: userText, UserName: userName, LastName: lastName}
		if err := database.SaveOrUpdateUser(user); err != nil {
			log.Printf("Error saving user: %v", err)
			return false
		}
		h.msgHandler.AskForCity(chatID)
		return true

	case StateWaitingForCity:
		user := &models.User{TelegramID: chatID, City: userText}
		if err := database.SaveOrUpdateUser(user); err != nil {
			log.Printf("Error saving user: %v", err)
			return false
		}
		h.msgHandler.CompleteProfile(chatID)
		return true

	case StateChangingNameFromProfile:
		user := &models.User{TelegramID: chatID, FirstName: userText}
		if err := database.SaveOrUpdateUser(user); err != nil {
			log.Printf("Error saving user: %v", err)
			return false
		}
		h.msgHandler.SendProfileSettings(chatID)
		h.storage.SetUserState(chatID, "")
		return true

	case StateChangingCityFromProfile:
		user := &models.User{TelegramID: chatID, City: userText}
		if err := database.SaveOrUpdateUser(user); err != nil {
			log.Printf("Error saving user: %v", err)
			return false
		}
		h.msgHandler.SendProfileSettings(chatID)
		h.storage.SetUserState(chatID, "")
		return true

	case StateWaitingForWeatherCity:
		h.msgHandler.SendWeather(chatID, userText)
		h.storage.SetUserState(chatID, "")
		return true

	case StateWaitingForCategoryName:
		h.notesHandler.HandleCategoryCreation(chatID, userText)
		return true

	case StateWaitingForNoteCategory:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π
		userData, exists := h.storage.GetUserData(chatID)
		if !exists {
			log.Printf("No user data found for chat %d in state %s", chatID, state)
			h.msgHandler.sendMessage(chatID, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ", CreateNotesMenuKeyboard())
			h.storage.SetUserState(chatID, "")
			return true
		}

		purpose := userData.Data
		log.Printf("Category selected: %s for purpose: %s", userText, purpose)

		switch purpose {
		case "new_note":
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ–ª–µ
			userData.Category = userText
			h.storage.SetUserData(chatID, userData)
			h.msgHandler.sendMessage(chatID,
				"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∑–∞–º–µ—Ç–∫—É:",
				CreateBackKeyboard())
			h.storage.SetUserState(chatID, StateWaitingForNoteContent)
			log.Printf("Waiting for note content for category: %s", userText)

		case "view_notes":
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
			h.notesHandler.SendNotesByCategory(chatID, userText)
			h.storage.SetUserState(chatID, "")
		case "delete_category":
			h.notesHandler.HandleDeleteCategory(chatID, userText)
		case "edit_category":
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
			h.notesHandler.HandleEditCategory(chatID, userText)
		case "save_forwarded_message":
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
			h.notesHandler.SaveForwardedMessage(chatID, userText, userData)
		default:
			log.Printf("Unknown purpose: %s", purpose)
			h.msgHandler.sendMessage(chatID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è", CreateNotesMenuKeyboard())
			h.storage.SetUserState(chatID, "")
		}
		return true

	case StateDeletingCategory:
		if strings.ToLower(userText) == "–¥–∞" || userText == "‚úÖ –î–∞" {
			h.notesHandler.ConfirmDeleteCategory(chatID, true)
		} else if strings.ToLower(userText) == "–Ω–µ—Ç" || userText == "‚ùå –ù–µ—Ç" {
			h.notesHandler.ConfirmDeleteCategory(chatID, false)
		} else if userText == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" {
			h.msgHandler.sendMessage(chatID, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", CreateCategoriesManagementKeyboard())
			h.storage.SetUserState(chatID, "")
		} else {
			h.msgHandler.sendMessage(chatID, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", CreateConfirmationKeyboard())
		}
		return true

	case StateEditingCategory:
		h.notesHandler.HandleCategoryUpdate(chatID, userText)
		return true

	case StateWaitingForNoteSelection:
		userData, exists := h.storage.GetUserData(chatID)
		if !exists {
			log.Printf("No user data found for chat %d in state %s", chatID, state)
			h.msgHandler.sendMessage(chatID, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ", CreateNotesMenuKeyboard())
			h.storage.SetUserState(chatID, "")
			return true
		}

		purpose := userData.Data
		log.Printf("Note selected: %s for purpose: %s", userText, purpose)

		// –ü–∞—Ä—Å–∏–º ID –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: "ID: —Ç–µ–∫—Å—Ç")
		noteIDStr := strings.Split(userText, ":")[0]
		noteID, err := strconv.ParseUint(strings.TrimSpace(noteIDStr), 10, 32)
		if err != nil {
			log.Printf("Error parsing note ID: %v", err)
			h.msgHandler.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–º–µ—Ç–∫–∏", CreateNotesMenuKeyboard())
			h.storage.SetUserState(chatID, "")
			return true
		}

		switch purpose {
		case "edit_note":
			h.notesHandler.HandleEditNoteSelection(chatID, uint(noteID))
		case "delete_note":
			h.notesHandler.HandleDeleteNoteSelection(chatID, uint(noteID))
		default:
			log.Printf("Unknown purpose: %s", purpose)
			h.msgHandler.sendMessage(chatID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è", CreateNotesMenuKeyboard())
			h.storage.SetUserState(chatID, "")
		}
		return true

	case StateEditingNote:
		h.notesHandler.HandleNoteContentUpdate(chatID, userText)
		return true

	case StateDeletingNote:
		if strings.ToLower(userText) == "–¥–∞" || userText == "‚úÖ –î–∞" {
			h.notesHandler.ConfirmDeleteNote(chatID, true)
		} else if strings.ToLower(userText) == "–Ω–µ—Ç" || userText == "‚ùå –ù–µ—Ç" {
			h.notesHandler.ConfirmDeleteNote(chatID, false)
		} else if userText == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" {
			h.msgHandler.sendMessage(chatID, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", CreateNotesManagementKeyboard())
			h.storage.SetUserState(chatID, "")
		} else {
			h.msgHandler.sendMessage(chatID, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", CreateConfirmationKeyboard())
		}
		return true

	case SaveForwardedMessage:
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		userData, _ := h.storage.GetUserData(chatID)
		h.notesHandler.SaveForwardedMessage(chatID, userText, userData)
	}
	return false
}

func (h *UpdateHandler) HandleUpdates(updates tgbotapi.UpdatesChannel) {
	for update := range updates {
		if update.Message == nil || update.Message.From.IsBot {
			continue
		}

		chatID := update.Message.Chat.ID
		userText := update.Message.Text

		log.Printf("[%d]: %s", chatID, userText)

		adminChatID := os.Getenv("ADMIN_CHAT_ID")
		if adminChatID != "" && adminChatID != fmt.Sprintf("%d", chatID) {
			log.Printf("Chat id: %d", chatID)
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º
		if update.Message.ForwardFrom != nil || update.Message.ForwardFromChat != nil || update.Message.ForwardSenderName != "" {
			log.Printf("Forwarded message: From=%v, FromChat=%v, SenderName=%s",
				update.Message.ForwardFrom,
				update.Message.ForwardFromChat,
				update.Message.ForwardSenderName)
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
		if state, exists := h.storage.GetUserState(chatID); exists {
			if h.handleUserState(chatID, state, userText, update.Message.From.UserName, update.Message.From.LastName, update) {
				continue
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
		if state, exists := h.storage.GetUserState(chatID); exists && state == StateWaitingForNoteContent {
			h.notesHandler.HandleNoteContent(chatID, update)
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
		switch userText {
		case "/start":
			h.msgHandler.SendStartMessage(chatID)
			if exists, _ := database.UserExists(chatID); !exists {
				user := &models.User{
					TelegramID: chatID,
					UserName:   update.Message.From.UserName,
					FirstName:  update.Message.From.FirstName,
					LastName:   update.Message.From.LastName,
				}
				database.SaveOrUpdateUser(user)
				h.msgHandler.AskForName(chatID)
			}

		case "‚úèÔ∏è –í–∞—à–µ –∏–º—è":
			h.msgHandler.AskForName(chatID)
			h.storage.SetUserState(chatID, StateChangingNameFromProfile)

		case "üö© –í–∞—à –≥–æ—Ä–æ–¥":
			h.msgHandler.AskForCity(chatID)
			h.storage.SetUserState(chatID, StateChangingCityFromProfile)

		case "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
			h.msgHandler.SendInfo(chatID)

		case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
			h.msgHandler.SendSettingsMenu(chatID)

		case "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
			h.msgHandler.SendSupport(chatID)

		case "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
			h.msgHandler.SendNotificationsSettings(chatID)

		case "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
			h.msgHandler.SendProfileSettings(chatID)

		case "üå°Ô∏è–ü–æ–≥–æ–¥–∞":
			if user, err := database.GetUserByTelegramID(chatID); err == nil && user.City != "" {
				h.msgHandler.SendWeather(chatID, user.City)
			} else {
				h.msgHandler.sendMessage(chatID, "üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", CreateMainMenuKeyboard())
				h.storage.SetUserState(chatID, StateWaitingForWeatherCity)
			}

		case "üå°Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ":
			// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			user, err := database.GetUserByTelegramID(chatID)
			if err != nil {
				log.Printf("Error getting user: %v", err)
				h.msgHandler.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", CreateSettingsMenuKeyboard())
				continue
			}

			// –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
			user.WeatherNotifications = !user.WeatherNotifications
			err = database.SaveOrUpdateUser(user)
			if err != nil {
				log.Printf("Error updating user: %v", err)
				h.msgHandler.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", CreateSettingsMenuKeyboard())
				continue
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
			status := "–≤–∫–ª—é—á–µ–Ω—ã"
			if !user.WeatherNotifications {
				status = "–≤—ã–∫–ª—é—á–µ–Ω—ã"
			}
			h.msgHandler.sendMessage(chatID, fmt.Sprintf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ %s", status), CreateSettingsMenuKeyboard())

		case "üìí –ó–∞–º–µ—Ç–∫–∏":
			h.notesHandler.SendNotesMenu(chatID)

		case "üìù –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞":
			h.notesHandler.SendCategoriesForSelection(chatID, "new_note")

		case "üìÅ –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏":
			// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
			categories, err := database.GetUserCategories(chatID)
			if err != nil || len(categories) == 0 {
				// –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
				h.notesHandler.SendUserNotes(chatID, 0)
			} else {
				// –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
				h.notesHandler.SendCategoriesForViewing(chatID)
			}

		case "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏":
			h.notesHandler.SendCategoriesMenu(chatID)

		case "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
			h.notesHandler.AskForCategoryName(chatID)

		case "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
			h.notesHandler.SendCategoriesForSelection(chatID, "delete_category")

		case "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
			h.notesHandler.SendEditCategoriesMenu(chatID)

		case "üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏":
			h.notesHandler.SendNotesManagementMenu(chatID)

		case "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É":
			h.notesHandler.SendNotesForSelection(chatID, "edit_note")

		case "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
			h.notesHandler.SendNotesForSelection(chatID, "delete_note")

		case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–º–µ—Ç–∫–∞–º":
			h.notesHandler.SendNotesMenu(chatID)

		case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É":
			h.notesHandler.SendUserNotes(chatID, 0)

		case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –í –Ω–∞—á–∞–ª–æ":
			h.msgHandler.SendMainMenu(chatID)

		case "üì∏ –ú–µ–¥–∏–∞-–∑–∞–º–µ—Ç–∫–∏":
			// –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 0 (–≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
			userData, exists := h.storage.GetUserData(chatID)
			var categoryID uint = 0
			if exists && userData.Category != "" {
				// –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ
				if cat, err := database.GetCategoryByName(chatID, userData.Category); err == nil {
					categoryID = cat.ID
				}
			}
			h.notesHandler.SendMediaNotes(chatID, categoryID)

		// –í —Ä–∞–∑–¥–µ–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤—å—Ç–µ:
		case "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
			// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
			h.msgHandler.sendMessage(chatID, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:", CreateBackKeyboard())
			h.storage.SetUserState(chatID, StateEditingNote)

		case "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å":
			// –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö

		default:
			// –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç (–Ω–µ –∫–æ–º–∞–Ω–¥–∞), –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫–∏
			if update.Message.Photo != nil || update.Message.Video != nil ||
				update.Message.Voice != nil || update.Message.Document != nil ||
				(update.Message.Text != "" && !isCommand(update.Message.Text)) {

				log.Printf("Forwarded message detected: Text=%s, HasPhoto=%t, HasVideo=%t, ForwardFrom=%v",
					update.Message.Text,
					update.Message.Photo != nil,
					update.Message.Video != nil,
					update.Message.ForwardFrom)

				// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
				h.saveMessageForForwarding(chatID, update.Message)

				// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
				h.notesHandler.SendCategoriesForSelection(chatID, "save_forwarded_message")
				continue
			}

			h.msgHandler.sendMessage(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", CreateMainMenuKeyboard())
		}
	}
}

func (h *MessageHandler) SendMessage(chatID int64, text string, keyboard tgbotapi.ReplyKeyboardMarkup) error {
	return h.sendMessage(chatID, text, keyboard)
}

func (h *UpdateHandler) GetMessageHandler() *MessageHandler {
	return h.msgHandler
}

// saveMessageForForwarding —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∑–∞–º–µ—Ç–∫–∏
func (h *UpdateHandler) saveMessageForForwarding(chatID int64, message *tgbotapi.Message) {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	var content string
	var fileID string
	var noteType string

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
	var sourceInfo string
	if message.ForwardFrom != nil {
		sourceInfo = fmt.Sprintf("–û—Ç: %s", getUserName(message.ForwardFrom))
	} else if message.ForwardFromChat != nil {
		sourceInfo = fmt.Sprintf("–ò–∑: %s", message.ForwardFromChat.Title)
	} else if message.ForwardSenderName != "" {
		sourceInfo = fmt.Sprintf("–û—Ç: %s", message.ForwardSenderName)
	}

	if message.Text != "" {
		noteType = "text"
		content = message.Text
		if sourceInfo != "" {
			content = sourceInfo + "\n\n" + content
		}
	} else if message.Photo != nil && len(message.Photo) > 0 {
		noteType = "photo"
		fileID = message.Photo[len(message.Photo)-1].FileID
		content = message.Caption
		if sourceInfo != "" {
			if content != "" {
				content = sourceInfo + "\n\n" + content
			} else {
				content = sourceInfo
			}
		}
	} else if message.Video != nil {
		noteType = "video"
		fileID = message.Video.FileID
		content = message.Caption
		if sourceInfo != "" {
			if content != "" {
				content = sourceInfo + "\n\n" + content
			} else {
				content = sourceInfo
			}
		}
	} else if message.Voice != nil {
		noteType = "voice"
		fileID = message.Voice.FileID
		content = sourceInfo // –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫
	} else if message.Document != nil {
		noteType = "file"
		fileID = message.Document.FileID
		content = message.Caption
		if sourceInfo != "" {
			if content != "" {
				content = sourceInfo + "\n\n" + content
			} else {
				content = sourceInfo
			}
		}
	} else {
		// –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ fallback
		noteType = "text"
		content = "–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
		if sourceInfo != "" {
			content = sourceInfo + "\n\n" + content
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	h.storage.SetUserData(chatID, pmodel.UserData{
		Data:     "save_forwarded_message",
		Name:     noteType,
		City:     content,
		Category: fileID,
	})

	log.Printf("Saved forwarded message data: Type=%s, Content=%s, FileID=%s, Source=%s",
		noteType, content, fileID, sourceInfo)
}

// getUserName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func getUserName(user *tgbotapi.User) string {
	if user.UserName != "" {
		return "@" + user.UserName
	} else if user.FirstName != "" {
		if user.LastName != "" {
			return user.FirstName + " " + user.LastName
		}
		return user.FirstName
	}
	return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
}

// isCommand –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π
func isCommand(text string) bool {
	commands := []string{
		"/start", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üå°Ô∏è–ü–æ–≥–æ–¥–∞", "üìí –ó–∞–º–µ—Ç–∫–∏",
		"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üå°Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ",
		"üìù –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞", "üìÅ –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
		"‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –í –Ω–∞—á–∞–ª–æ",
		"‚úèÔ∏è –í–∞—à–µ –∏–º—è", "üö© –í–∞—à –≥–æ—Ä–æ–¥", "üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏",
		"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–º–µ—Ç–∫–∞–º",
		"‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
		"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "‚ûï –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
	}

	for _, cmd := range commands {
		if text == cmd {
			return true
		}
	}
	return false
}
