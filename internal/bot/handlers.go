package bot

import (
	"GreenAssistantBot/internal/database"
	"GreenAssistantBot/internal/database/models"
	"GreenAssistantBot/internal/storage"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"os"
)

type UpdateHandler struct {
	bot        *tgbotapi.BotAPI
	storage    storage.BotStorage
	msgHandler *MessageHandler
}

func NewUpdateHandler(bot *tgbotapi.BotAPI, storage storage.BotStorage) *UpdateHandler {
	return &UpdateHandler{
		bot:        bot,
		storage:    storage,
		msgHandler: NewMessageHandler(bot, storage),
	}
}

func (h *UpdateHandler) handleUserState(chatID int64, state, userText, userName, lastName string) bool {
	switch state {
	case StateWaitingForName:
		user := &models.User{TelegramID: chatID, FirstName: userText, UserName: userName, LastName: lastName}
		if err := database.SaveOrUpdateUser(user); err != nil {
			log.Printf("Error saving user: %v", err)
			return false
		}
		h.msgHandler.AskForCity(chatID)
		return true

	case StateWaitingForCity:
		user := &models.User{TelegramID: chatID, City: userText}
		if err := database.SaveOrUpdateUser(user); err != nil {
			log.Printf("Error saving user: %v", err)
			return false
		}
		h.msgHandler.CompleteProfile(chatID)
		return true

	case StateChangingNameFromProfile:
		user := &models.User{TelegramID: chatID, FirstName: userText}
		if err := database.SaveOrUpdateUser(user); err != nil {
			log.Printf("Error saving user: %v", err)
			return false
		}
		h.msgHandler.SendProfileSettings(chatID)
		h.storage.SetUserState(chatID, "")
		return true

	case StateChangingCityFromProfile:
		user := &models.User{TelegramID: chatID, City: userText}
		if err := database.SaveOrUpdateUser(user); err != nil {
			log.Printf("Error saving user: %v", err)
			return false
		}
		h.msgHandler.SendProfileSettings(chatID)
		h.storage.SetUserState(chatID, "")
		return true

	case StateWaitingForWeatherCity:
		h.msgHandler.SendWeather(chatID, userText)
		h.storage.SetUserState(chatID, "")
		return true
	}
	return false
}

func (h *UpdateHandler) HandleUpdates(updates tgbotapi.UpdatesChannel) {
	for update := range updates {
		if update.Message == nil || update.Message.From.IsBot {
			continue
		}

		chatID := update.Message.Chat.ID
		userText := update.Message.Text

		log.Printf("[%d]: %s", chatID, userText)

		adminChatID := os.Getenv("ADMIN_CHAT_ID")
		if adminChatID != "" && adminChatID != fmt.Sprintf("%d", chatID) {
			log.Printf("Chat id: %d", chatID)
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
		if state, exists := h.storage.GetUserState(chatID); exists {
			if h.handleUserState(chatID, state, userText, update.Message.From.UserName, update.Message.From.LastName) {
				continue
			}
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
		switch userText {
		case "/start":
			h.msgHandler.SendStartMessage(chatID)
			if exists, _ := database.UserExists(chatID); !exists {
				user := &models.User{
					TelegramID: chatID,
					UserName:   update.Message.From.UserName,
					FirstName:  update.Message.From.FirstName,
					LastName:   update.Message.From.LastName,
				}
				database.SaveOrUpdateUser(user)
				h.msgHandler.AskForName(chatID)
			}

		case "‚úèÔ∏è –í–∞—à–µ –∏–º—è":
			h.msgHandler.AskForName(chatID)
			h.storage.SetUserState(chatID, StateChangingNameFromProfile)

		case "üö© –í–∞—à –≥–æ—Ä–æ–¥":
			h.msgHandler.AskForCity(chatID)
			h.storage.SetUserState(chatID, StateChangingCityFromProfile)

		case "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
			h.msgHandler.SendInfo(chatID)

		case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
			h.msgHandler.SendSettingsMenu(chatID)

		case "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
			h.msgHandler.SendSupport(chatID)

		case "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
			h.msgHandler.SendNotificationsSettings(chatID)

		case "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
			h.msgHandler.SendProfileSettings(chatID)

		case "üå°Ô∏è–ü–æ–≥–æ–¥–∞":
			if user, err := database.GetUserByTelegramID(chatID); err == nil && user.City != "" {
				h.msgHandler.SendWeather(chatID, user.City)
			} else {
				h.msgHandler.sendMessage(chatID, "üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", CreateMainMenuKeyboard())
				h.storage.SetUserState(chatID, StateWaitingForWeatherCity)
			}

		case "üå°Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ":
			// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			user, err := database.GetUserByTelegramID(chatID)
			if err != nil {
				log.Printf("Error getting user: %v", err)
				h.msgHandler.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", CreateSettingsMenuKeyboard())
				continue
			}

			// –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
			user.WeatherNotifications = !user.WeatherNotifications
			err = database.SaveOrUpdateUser(user)
			if err != nil {
				log.Printf("Error updating user: %v", err)
				h.msgHandler.sendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", CreateSettingsMenuKeyboard())
				continue
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
			status := "–≤–∫–ª—é—á–µ–Ω—ã"
			if !user.WeatherNotifications {
				status = "–≤—ã–∫–ª—é—á–µ–Ω—ã"
			}
			h.msgHandler.sendMessage(chatID, fmt.Sprintf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ %s", status), CreateSettingsMenuKeyboard())

		case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –í –Ω–∞—á–∞–ª–æ":
			h.msgHandler.SendMainMenu(chatID)

		default:
			h.msgHandler.sendMessage(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", CreateMainMenuKeyboard())
		}
	}
}

func (h *MessageHandler) SendMessage(chatID int64, text string, keyboard tgbotapi.ReplyKeyboardMarkup) error {
	return h.sendMessage(chatID, text, keyboard)
}

func (h *UpdateHandler) GetMessageHandler() *MessageHandler {
	return h.msgHandler
}
