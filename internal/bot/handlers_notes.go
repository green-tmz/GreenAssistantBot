package bot

import (
	"GreenAssistantBot/internal/database"
	"GreenAssistantBot/internal/database/models"
	"GreenAssistantBot/internal/storage"
	pmodel "GreenAssistantBot/pkg/models"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type NotesHandler struct {
	bot        *tgbotapi.BotAPI
	storage    storage.BotStorage
	msgHandler *MessageHandler
}

func NewNotesHandler(bot *tgbotapi.BotAPI, storage storage.BotStorage, msgHandler *MessageHandler) *NotesHandler {
	return &NotesHandler{
		bot:        bot,
		storage:    storage,
		msgHandler: msgHandler,
	}
}

// SendNotesMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –∑–∞–º–µ—Ç–æ–∫
func (h *NotesHandler) SendNotesMenu(chatID int64) {
	text := `üìí **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏**

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.

‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–º–µ—Ç–æ–∫
‚Ä¢ üñºÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ üîó –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
‚Ä¢ üìÇ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∏ –¥–æ—Å—Ç—É–ø`

	h.msgHandler.sendMessage(chatID, text, CreateNotesMenuKeyboard())
}

// SendCategoriesMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
func (h *NotesHandler) SendCategoriesMenu(chatID int64) {
	categories, err := database.GetUserCategories(chatID)
	if err != nil {
		log.Printf("Error getting categories: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", CreateNotesMenuKeyboard())
		return
	}

	if len(categories) == 0 {
		text := `üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏**

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–º–µ—Ç–æ–∫.`
		h.msgHandler.sendMessage(chatID, text, CreateCategoriesManagementKeyboard())
		return
	}

	var categoriesText strings.Builder
	categoriesText.WriteString("üìÇ **–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n\n")

	for i, category := range categories {
		count, _ := database.GetNotesCountByCategory(chatID, category.ID)
		emoji := getCategoryEmoji(i)
		categoriesText.WriteString(fmt.Sprintf("%s **%s** - %d –∑–∞–º–µ—Ç–æ–∫\n", emoji, category.Name, count))
	}

	h.msgHandler.sendMessage(chatID, categoriesText.String(), CreateCategoriesManagementKeyboard())
}

// AskForCategoryName –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func (h *NotesHandler) AskForCategoryName(chatID int64) {
	text := "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
	h.msgHandler.sendMessage(chatID, text, CreateBackKeyboard())
	h.storage.SetUserState(chatID, StateWaitingForCategoryName)
}

// HandleCategoryCreation –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func (h *NotesHandler) HandleCategoryCreation(chatID int64, categoryName string) {
	if strings.TrimSpace(categoryName) == "" {
		h.msgHandler.sendMessage(chatID, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", CreateBackKeyboard())
		return
	}

	// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
	colors := []string{"üîµ", "üü¢", "üü°", "üü†", "üî¥", "üü£"}
	colorIndex := len(h.storage.GetMessageHistory(chatID)) % len(colors)

	_, err := database.CreateCategory(chatID, categoryName, colors[colorIndex])
	if err != nil {
		log.Printf("Error creating category: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", CreateNotesMenuKeyboard())
		return
	}

	h.msgHandler.sendMessage(chatID, fmt.Sprintf("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è \"%s\" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", categoryName), CreateCategoriesManagementKeyboard())
	h.storage.SetUserState(chatID, "")
}

// SendCategoriesForSelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
func (h *NotesHandler) SendCategoriesForSelection(chatID int64, purpose string) {
	categories, err := database.GetUserCategories(chatID)
	if err != nil {
		log.Printf("Error getting categories: %v", err)
		h.msgHandler.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", CreateNotesMenuKeyboard())
		return
	}

	if len(categories) == 0 {
		h.msgHandler.SendMessage(chatID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.", CreateNotesMenuKeyboard())
		return
	}

	log.Printf("SendCategoriesForSelection: chatID=%d, purpose=%s, categories=%d", chatID, purpose, len(categories))

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ Data
	currentData, _ := h.storage.GetUserData(chatID)
	currentData.Data = purpose
	h.storage.SetUserData(chatID, currentData)
	h.storage.SetUserState(chatID, StateWaitingForNoteCategory)

	// –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
	savedData, exists := h.storage.GetUserData(chatID)
	savedState, stateExists := h.storage.GetUserState(chatID)

	log.Printf("After setting - Data exists: %t, State exists: %t", exists, stateExists)
	if exists {
		log.Printf("Saved user data: %+v", savedData)
	}
	if stateExists {
		log.Printf("Saved user state: %s", savedState)
	}

	h.msgHandler.SendMessage(chatID, "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", CreateCategoriesKeyboard(categories))
}

// HandleNoteContent –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–º–µ—Ç–∫–∏
func (h *NotesHandler) HandleNoteContent(chatID int64, update tgbotapi.Update) {
	userData, exists := h.storage.GetUserData(chatID)
	if !exists {
		log.Printf("No user data found for chat %d in HandleNoteContent", chatID)
		h.msgHandler.sendMessage(chatID, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ", CreateNotesMenuKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	categoryName := userData.Category
	log.Printf("Processing note content for category: %s", categoryName)

	// –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
	selectedCategory, err := database.GetCategoryByName(chatID, categoryName)
	if err != nil {
		log.Printf("Error finding category: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", CreateNotesMenuKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	log.Printf("Selected category: %+v", selectedCategory)

	// –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	note := &models.Note{
		TelegramID: chatID,
		CategoryID: selectedCategory.ID,
	}

	message := update.Message
	if message == nil {
		log.Printf("Message is nil")
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
	if message.Text != "" {
		note.Type = models.NoteTypeText
		note.Content = message.Text
		log.Printf("Creating text note: %s", message.Text)
	} else if message.Photo != nil && len(message.Photo) > 0 {
		note.Type = models.NoteTypePhoto
		note.FileID = message.Photo[len(message.Photo)-1].FileID
		note.Caption = message.Caption
		log.Printf("Creating photo note with file ID: %s", note.FileID)
	} else if message.Video != nil {
		note.Type = models.NoteTypeVideo
		note.FileID = message.Video.FileID
		note.Caption = message.Caption
		log.Printf("Creating video note with file ID: %s", note.FileID)
	} else if message.Voice != nil {
		note.Type = models.NoteTypeVoice
		note.FileID = message.Voice.FileID
		log.Printf("Creating voice note with file ID: %s", note.FileID)
	} else if message.Document != nil {
		note.Type = models.NoteTypeFile
		note.FileID = message.Document.FileID
		note.Caption = message.Caption
		log.Printf("Creating file note with file ID: %s", note.FileID)
	} else {
		log.Printf("Unsupported message type")
		h.msgHandler.sendMessage(chatID, "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è", CreateNotesMenuKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	if err := database.CreateNote(note); err != nil {
		log.Printf("Error creating note: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏", CreateNotesMenuKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	log.Printf("Note created successfully")
	h.msgHandler.sendMessage(chatID,
		fmt.Sprintf("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é \"%s\"!", selectedCategory.Name),
		CreateNotesMenuKeyboard())
	h.storage.SetUserState(chatID, "")
}

// SendNotesByCategory –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func (h *NotesHandler) SendNotesByCategory(chatID int64, categoryName string) {
	category, err := database.GetCategoryByName(chatID, categoryName)
	if err != nil {
		log.Printf("Error finding category: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", CreateNotesMenuKeyboard())
		return
	}

	h.SendUserNotes(chatID, category.ID)
}

// SendCategoriesForViewing –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–æ–∫
func (h *NotesHandler) SendCategoriesForViewing(chatID int64) {
	h.SendCategoriesForSelection(chatID, "view_notes")
}

// SendMediaNotes –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞-–∑–∞–º–µ—Ç–∫–∏
func (h *NotesHandler) SendMediaNotes(chatID int64, categoryID uint) {
	notes, err := database.GetUserNotes(chatID, categoryID)
	if err != nil {
		log.Printf("Error getting notes: %v", err)
		return
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞-–∑–∞–º–µ—Ç–∫–∏
	var mediaNotes []models.Note
	for _, note := range notes {
		if note.Type == models.NoteTypePhoto || note.Type == models.NoteTypeVideo || note.Type == models.NoteTypeVoice {
			mediaNotes = append(mediaNotes, note)
		}
	}

	if len(mediaNotes) == 0 {
		h.msgHandler.sendMessage(chatID, "üì∏ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –º–µ–¥–∏–∞-–∑–∞–º–µ—Ç–æ–∫", CreateNotesViewKeyboard())
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –º–µ–¥–∏–∞-–∑–∞–º–µ—Ç–æ–∫
	countMsg := fmt.Sprintf("üì∏ –ú–µ–¥–∏–∞-–∑–∞–º–µ—Ç–æ–∫: %d", len(mediaNotes))
	h.msgHandler.sendMessage(chatID, countMsg, CreateNotesViewKeyboard())

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –º–µ–¥–∏–∞-–∑–∞–º–µ—Ç–∫–∏
	for _, note := range mediaNotes {
		h.sendNotePreview(chatID, note)
		// –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π –º–µ–¥–∏–∞
		time.Sleep(500 * time.Millisecond)
	}
}

// SendUserNotes –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *NotesHandler) SendUserNotes(chatID int64, categoryID uint) {
	notes, err := database.GetUserNotes(chatID, categoryID)
	if err != nil {
		log.Printf("Error getting notes: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–º–µ—Ç–æ–∫", CreateNotesMenuKeyboard())
		return
	}

	if len(notes) == 0 {
		var msg string
		if categoryID == 0 {
			msg = "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫"
		} else {
			category, _ := database.GetCategoryByID(chatID, categoryID)
			if category != nil {
				msg = fmt.Sprintf("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"%s\"", category.Name)
			} else {
				msg = "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
			}
		}
		h.msgHandler.sendMessage(chatID, msg, CreateNotesMenuKeyboard())
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–º–µ—Ç–æ–∫
	var countMsg string
	if categoryID == 0 {
		countMsg = fmt.Sprintf("üìã –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: %d", len(notes))
	} else {
		category, _ := database.GetCategoryByID(chatID, categoryID)
		if category != nil {
			countMsg = fmt.Sprintf("üìã –ó–∞–º–µ—Ç–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"%s\": %d", category.Name, len(notes))
		} else {
			countMsg = fmt.Sprintf("üìã –ó–∞–º–µ—Ç–æ–∫: %d", len(notes))
		}
	}
	h.msgHandler.sendMessage(chatID, countMsg, CreateNotesViewKeyboard())

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
	for _, note := range notes {
		h.sendNotePreview(chatID, note)
		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–º–µ—Ç–æ–∫
		time.Sleep(300 * time.Millisecond)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏
	h.msgHandler.sendMessage(chatID, "üõ†Ô∏è –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", CreateNotesViewKeyboard())
}

// sendNotePreview –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é –∑–∞–º–µ—Ç–∫–∏
func (h *NotesHandler) sendNotePreview(chatID int64, note models.Note) {
	var text string
	emoji := getNoteTypeEmoji(note.Type)

	switch note.Type {
	case models.NoteTypeText:
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –æ–±—Ä–µ–∑–∞–Ω–∏—è
		text = fmt.Sprintf("%s **–¢–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞**\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\nüìÖ %s\n\n%s",
			emoji, note.Category.Name, note.CreatedAt.Format("02.01.2006 15:04"), note.Content)
		h.sendLongMessage(chatID, text)

	case models.NoteTypePhoto:
		text = fmt.Sprintf("%s **–§–æ—Ç–æ –∑–∞–º–µ—Ç–∫–∞**\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\nüìÖ %s",
			emoji, note.Category.Name, note.CreatedAt.Format("02.01.2006 15:04"))
		if note.Caption != "" {
			text += fmt.Sprintf("\nüìù –ü–æ–¥–ø–∏—Å—å: %s", note.Caption)
		}
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
		h.sendMediaMessage(chatID, note.FileID, "photo", text)

	case models.NoteTypeVideo:
		text = fmt.Sprintf("%s **–í–∏–¥–µ–æ –∑–∞–º–µ—Ç–∫–∞**\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\nüìÖ %s",
			emoji, note.Category.Name, note.CreatedAt.Format("02.01.2006 15:04"))
		if note.Caption != "" {
			text += fmt.Sprintf("\nüìù –ü–æ–¥–ø–∏—Å—å: %s", note.Caption)
		}
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
		h.sendMediaMessage(chatID, note.FileID, "video", text)

	case models.NoteTypeVoice:
		text = fmt.Sprintf("%s **–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞**\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\nüìÖ %s",
			emoji, note.Category.Name, note.CreatedAt.Format("02.01.2006 15:04"))
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		h.sendMediaMessage(chatID, note.FileID, "voice", text)

	case models.NoteTypeFile:
		text = fmt.Sprintf("%s **–§–∞–π–ª**\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\nüìÖ %s",
			emoji, note.Category.Name, note.CreatedAt.Format("02.01.2006 15:04"))
		if note.Caption != "" {
			text += fmt.Sprintf("\nüìù –ü–æ–¥–ø–∏—Å—å: %s", note.Caption)
		}
		h.sendLongMessage(chatID, text)

	default:
		text = fmt.Sprintf("%s **%s –∑–∞–º–µ—Ç–∫–∞**\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\nüìÖ %s",
			emoji, strings.Title(string(note.Type)), note.Category.Name, note.CreatedAt.Format("02.01.2006 15:04"))
		if note.Caption != "" {
			text += fmt.Sprintf("\nüìù –ü–æ–¥–ø–∏—Å—å: %s", note.Caption)
		}
		h.sendLongMessage(chatID, text)
	}
}

// sendLongMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
func (h *NotesHandler) sendLongMessage(chatID int64, text string) {
	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
	maxLength := 4096

	if len(text) <= maxLength {
		h.msgHandler.sendMessage(chatID, text, CreateNotesMenuKeyboard())
		return
	}

	// –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
	parts := splitMessage(text, maxLength)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	if len(parts) > 0 {
		h.msgHandler.sendMessage(chatID, parts[0], CreateNotesMenuKeyboard())
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	for i := 1; i < len(parts); i++ {
		h.msgHandler.sendMessage(chatID, parts[i], tgbotapi.NewRemoveKeyboard(true))
		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
		if i < len(parts)-1 {
			time.Sleep(100 * time.Millisecond)
		}
	}
}

// splitMessage —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
func splitMessage(text string, maxLength int) []string {
	if len(text) <= maxLength {
		return []string{text}
	}

	var parts []string
	for len(text) > 0 {
		if len(text) <= maxLength {
			parts = append(parts, text)
			break
		}

		// –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±–∏—Ç—å –ø–æ –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏
		splitIndex := strings.LastIndex(text[:maxLength], "\n")
		if splitIndex == -1 {
			// –ï—Å–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª—É
			splitIndex = strings.LastIndex(text[:maxLength], " ")
			if splitIndex == -1 {
				// –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–µ–∑–∞–µ–º
				splitIndex = maxLength
			}
		}

		parts = append(parts, text[:splitIndex])
		text = text[splitIndex:]

		// –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã/–ø–µ—Ä–µ–Ω–æ—Å—ã
		text = strings.TrimLeft(text, " \n")
	}

	return parts
}

// sendMediaMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞-—Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é
func (h *NotesHandler) sendMediaMessage(chatID int64, fileID, mediaType, caption string) {
	// –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –ø–æ–¥–ø–∏—Å–∏
	// Telegram —Å–∞–º –æ–±—Ä–µ–∂–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏

	var err error
	switch mediaType {
	case "photo":
		photo := tgbotapi.NewPhoto(chatID, tgbotapi.FileID(fileID))
		photo.Caption = caption
		photo.ParseMode = "Markdown"
		_, err = h.bot.Send(photo)

	case "video":
		video := tgbotapi.NewVideo(chatID, tgbotapi.FileID(fileID))
		video.Caption = caption
		video.ParseMode = "Markdown"
		_, err = h.bot.Send(video)

	case "voice":
		voice := tgbotapi.NewVoice(chatID, tgbotapi.FileID(fileID))
		voice.Caption = caption
		voice.ParseMode = "Markdown"
		_, err = h.bot.Send(voice)

	default:
		log.Printf("Unsupported media type: %s", mediaType)
		return
	}

	if err != nil {
		log.Printf("Error sending media message: %v", err)
		// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
		h.sendLongMessage(chatID, caption)
	}
}

// HandleDeleteCategory –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func (h *NotesHandler) HandleDeleteCategory(chatID int64, categoryName string) {
	categories, err := database.GetUserCategories(chatID)
	if err != nil {
		log.Printf("Error getting categories: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", CreateNotesMenuKeyboard())
		return
	}

	var categoryToDelete *models.Category
	for _, cat := range categories {
		if cat.Name == categoryName {
			categoryToDelete = &cat
			break
		}
	}

	if categoryToDelete == nil {
		h.msgHandler.sendMessage(chatID, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", CreateNotesMenuKeyboard())
		return
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
	notesCount, _ := database.GetNotesCountByCategory(chatID, categoryToDelete.ID)
	text := fmt.Sprintf("‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: **%s**\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫: **%d**\n\n–í—Å–µ –∑–∞–º–µ—Ç–∫–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ.",
		categoryToDelete.Name, notesCount)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã "–ù–∞–∑–∞–¥"
	h.msgHandler.sendMessage(chatID, text, CreateConfirmationKeyboard())
	h.storage.SetUserData(chatID, pmodel.UserData{Data: strconv.FormatUint(uint64(categoryToDelete.ID), 10)})
	h.storage.SetUserState(chatID, StateDeletingCategory)
}

// ConfirmDeleteCategory –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func (h *NotesHandler) ConfirmDeleteCategory(chatID int64, confirm bool) {
	if !confirm {
		h.msgHandler.sendMessage(chatID, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", CreateCategoriesManagementKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	userData, _ := h.storage.GetUserData(chatID)
	categoryID, err := strconv.ParseUint(userData.Data, 10, 32)
	if err != nil {
		log.Printf("Error parsing category ID: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", CreateCategoriesManagementKeyboard())
		return
	}

	if err := database.DeleteCategory(chatID, uint(categoryID)); err != nil {
		log.Printf("Error deleting category: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", CreateCategoriesManagementKeyboard())
		return
	}

	h.msgHandler.sendMessage(chatID, "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã", CreateCategoriesManagementKeyboard())
	h.storage.SetUserState(chatID, "")
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
func getCategoryEmoji(index int) string {
	emojis := []string{"üîµ", "üü¢", "üü°", "üü†", "üî¥", "üü£", "‚ö´Ô∏è", "‚ö™Ô∏è"}
	return emojis[index%len(emojis)]
}

func getNoteTypeEmoji(noteType models.NoteType) string {
	switch noteType {
	case models.NoteTypeText:
		return "üìù"
	case models.NoteTypePhoto:
		return "üñºÔ∏è"
	case models.NoteTypeVideo:
		return "üé•"
	case models.NoteTypeVoice:
		return "üé§"
	case models.NoteTypeLink:
		return "üîó"
	case models.NoteTypeFile:
		return "üìé"
	default:
		return "üìÑ"
	}
}

// SendEditCategoriesMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
func (h *NotesHandler) SendEditCategoriesMenu(chatID int64) {
	categories, err := database.GetUserCategories(chatID)
	if err != nil {
		log.Printf("Error getting categories: %v", err)
		h.msgHandler.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", CreateCategoriesManagementKeyboard())
		return
	}

	if len(categories) == 0 {
		text := `üìÇ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π**

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.`
		h.msgHandler.SendMessage(chatID, text, CreateCategoriesManagementKeyboard())
		return
	}

	var categoriesText strings.Builder
	categoriesText.WriteString("üìÇ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π**\n\n")
	categoriesText.WriteString("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n")

	for i, category := range categories {
		count, _ := database.GetNotesCountByCategory(chatID, category.ID)
		emoji := getCategoryEmoji(i)
		categoriesText.WriteString(fmt.Sprintf("%s **%s** - %d –∑–∞–º–µ—Ç–æ–∫\n", emoji, category.Name, count))
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	h.storage.SetUserData(chatID, pmodel.UserData{Data: "edit_category"})
	h.storage.SetUserState(chatID, StateWaitingForNoteCategory)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ü–û–°–õ–ï —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã—Ö
	h.msgHandler.SendMessage(chatID, categoriesText.String(), CreateCategoriesKeyboard(categories))
}

// HandleEditCategory –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func (h *NotesHandler) HandleEditCategory(chatID int64, categoryName string) {
	category, err := database.GetCategoryByName(chatID, categoryName)
	if err != nil {
		log.Printf("Error finding category: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", CreateCategoriesManagementKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	h.storage.SetUserData(chatID, pmodel.UserData{
		Data: strconv.FormatUint(uint64(category.ID), 10),
	})

	text := fmt.Sprintf("‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏**\n\nüìÇ –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: **%s**\nüé® –¶–≤–µ—Ç: %s\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
		category.Name, category.Color)

	h.msgHandler.sendMessage(chatID, text, CreateBackKeyboard())
	h.storage.SetUserState(chatID, StateEditingCategory)
}

// HandleCategoryUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func (h *NotesHandler) HandleCategoryUpdate(chatID int64, newName string) {
	if strings.TrimSpace(newName) == "" {
		h.msgHandler.sendMessage(chatID, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", CreateBackKeyboard())
		return
	}

	userData, _ := h.storage.GetUserData(chatID)
	categoryID, err := strconv.ParseUint(userData.Data, 10, 32)
	if err != nil {
		log.Printf("Error parsing category ID: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", CreateCategoriesManagementKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
	category, err := database.GetCategoryByID(chatID, uint(categoryID))
	if err != nil {
		log.Printf("Error getting category: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", CreateCategoriesManagementKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
	category.Name = newName
	db := database.GetConnect()
	if err := db.Save(category).Error; err != nil {
		log.Printf("Error updating category: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", CreateCategoriesManagementKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	h.msgHandler.sendMessage(chatID, fmt.Sprintf("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ \"%s\"", newName), CreateCategoriesManagementKeyboard())
	h.storage.SetUserState(chatID, "")
}

// SendNotesManagementMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏
func (h *NotesHandler) SendNotesManagementMenu(chatID int64) {
	text := `üõ†Ô∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏**

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–º–µ—Ç–∫–∏.

‚ú® **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É - –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
‚Ä¢ üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É - –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É`

	h.msgHandler.sendMessage(chatID, text, CreateNotesManagementKeyboard())
}

// SendNotesForSelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
func (h *NotesHandler) SendNotesForSelection(chatID int64, purpose string) {
	notes, err := database.GetUserNotes(chatID, 0) // 0 - –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	if err != nil {
		log.Printf("Error getting notes: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–º–µ—Ç–æ–∫", CreateNotesManagementKeyboard())
		return
	}

	if len(notes) == 0 {
		h.msgHandler.sendMessage(chatID, "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫", CreateNotesManagementKeyboard())
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å –≤—ã–±–æ—Ä–∞ –∑–∞–º–µ—Ç–∫–∏
	h.storage.SetUserData(chatID, pmodel.UserData{Data: purpose})
	h.storage.SetUserState(chatID, StateWaitingForNoteSelection)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
	var notesText strings.Builder
	notesText.WriteString("üìã **–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É:**\n\n")

	for i, note := range notes {
		if i >= 10 { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∫–∞–∑ 10 –∑–∞–º–µ—Ç–∫–∞–º–∏
			notesText.WriteString(fmt.Sprintf("\n... –∏ –µ—â–µ %d –∑–∞–º–µ—Ç–æ–∫", len(notes)-10))
			break
		}

		var preview string
		switch note.Type {
		case models.NoteTypeText:
			if len(note.Content) > 50 {
				preview = note.Content[:50] + "..."
			} else {
				preview = note.Content
			}
		case models.NoteTypePhoto:
			preview = "üñºÔ∏è –§–æ—Ç–æ"
		case models.NoteTypeVideo:
			preview = "üé• –í–∏–¥–µ–æ"
		case models.NoteTypeVoice:
			preview = "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
		case models.NoteTypeFile:
			preview = "üìé –§–∞–π–ª"
		default:
			preview = "üìÑ –ó–∞–º–µ—Ç–∫–∞"
		}

		emoji := getNoteTypeEmoji(note.Type)
		notesText.WriteString(fmt.Sprintf("%s `%d`: %s\n", emoji, note.ID, preview))
	}

	h.msgHandler.sendMessage(chatID, notesText.String(), CreateBackKeyboard())
}

// HandleEditNoteSelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
func (h *NotesHandler) HandleEditNoteSelection(chatID int64, noteID uint) {
	note, err := database.GetNoteByID(chatID, noteID)
	if err != nil {
		log.Printf("Error getting note: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", CreateNotesManagementKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	h.storage.SetUserData(chatID, pmodel.UserData{
		Data: strconv.FormatUint(uint64(noteID), 10),
	})

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–µ—Ç–∫–µ –∏ –¥–µ–π—Å—Ç–≤–∏—è
	text := fmt.Sprintf("‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏**\n\n%s\n\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\nüìÖ –°–æ–∑–¥–∞–Ω–∞: %s",
		h.formatNoteContent(note), note.Category.Name, note.CreatedAt.Format("02.01.2006 15:04"))

	h.msgHandler.sendMessage(chatID, text, CreateNoteActionsKeyboard())
	h.storage.SetUserState(chatID, "")
}

// HandleDeleteNoteSelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
func (h *NotesHandler) HandleDeleteNoteSelection(chatID int64, noteID uint) {
	note, err := database.GetNoteByID(chatID, noteID)
	if err != nil {
		log.Printf("Error getting note: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", CreateNotesManagementKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
	h.storage.SetUserData(chatID, pmodel.UserData{
		Data: strconv.FormatUint(uint64(noteID), 10),
	})

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
	text := fmt.Sprintf("‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n%s\n\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\nüìÖ –°–æ–∑–¥–∞–Ω–∞: %s\n\n–ó–∞–º–µ—Ç–∫–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ.",
		h.formatNoteContent(note), note.Category.Name, note.CreatedAt.Format("02.01.2006 15:04"))

	h.msgHandler.sendMessage(chatID, text, CreateConfirmationKeyboard())
	h.storage.SetUserState(chatID, StateDeletingNote)
}

// ConfirmDeleteNote –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
func (h *NotesHandler) ConfirmDeleteNote(chatID int64, confirm bool) {
	if !confirm {
		h.msgHandler.sendMessage(chatID, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", CreateNotesManagementKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	userData, _ := h.storage.GetUserData(chatID)
	noteID, err := strconv.ParseUint(userData.Data, 10, 32)
	if err != nil {
		log.Printf("Error parsing note ID: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏", CreateNotesManagementKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	if err := database.DeleteNote(chatID, uint(noteID)); err != nil {
		log.Printf("Error deleting note: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏", CreateNotesManagementKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	h.msgHandler.sendMessage(chatID, "‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", CreateNotesManagementKeyboard())
	h.storage.SetUserState(chatID, "")
}

// HandleNoteContentUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
func (h *NotesHandler) HandleNoteContentUpdate(chatID int64, newContent string) {
	userData, _ := h.storage.GetUserData(chatID)
	noteID, err := strconv.ParseUint(userData.Data, 10, 32)
	if err != nil {
		log.Printf("Error parsing note ID: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏", CreateNotesManagementKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	note, err := database.GetNoteByID(chatID, uint(noteID))
	if err != nil {
		log.Printf("Error getting note: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", CreateNotesManagementKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
	note.Content = newContent
	db := database.GetConnect()
	if err := db.Save(note).Error; err != nil {
		log.Printf("Error updating note: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏", CreateNotesManagementKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	h.msgHandler.sendMessage(chatID, "‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", CreateNotesManagementKeyboard())
	h.storage.SetUserState(chatID, "")
}

// formatNoteContent —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func (h *NotesHandler) formatNoteContent(note *models.Note) string {
	switch note.Type {
	case models.NoteTypeText:
		if len(note.Content) > 100 {
			return note.Content[:100] + "..."
		}
		return note.Content
	case models.NoteTypePhoto:
		if note.Caption != "" {
			return fmt.Sprintf("üñºÔ∏è –§–æ—Ç–æ: %s", note.Caption)
		}
		return "üñºÔ∏è –§–æ—Ç–æ"
	case models.NoteTypeVideo:
		if note.Caption != "" {
			return fmt.Sprintf("üé• –í–∏–¥–µ–æ: %s", note.Caption)
		}
		return "üé• –í–∏–¥–µ–æ"
	case models.NoteTypeVoice:
		return "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
	case models.NoteTypeFile:
		if note.Caption != "" {
			return fmt.Sprintf("üìé –§–∞–π–ª: %s", note.Caption)
		}
		return "üìé –§–∞–π–ª"
	default:
		return "üìÑ –ó–∞–º–µ—Ç–∫–∞"
	}
}

// SaveForwardedMessage —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func (h *NotesHandler) SaveForwardedMessage(chatID int64, categoryName string, userData pmodel.UserData) {
	// –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
	category, err := database.GetCategoryByName(chatID, categoryName)
	if err != nil {
		log.Printf("Error finding category: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", CreateMainMenuKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø –≤ models.NoteType
	var noteType models.NoteType
	switch userData.Name {
	case "text":
		noteType = models.NoteTypeText
	case "photo":
		noteType = models.NoteTypePhoto
	case "video":
		noteType = models.NoteTypeVideo
	case "voice":
		noteType = models.NoteTypeVoice
	case "file":
		noteType = models.NoteTypeFile
	default:
		noteType = models.NoteTypeText // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	// –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	note := &models.Note{
		TelegramID: chatID,
		CategoryID: category.ID,
		Type:       noteType,
		FileID:     userData.Category, // FileID –¥–ª—è –º–µ–¥–∏–∞
	}

	// –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º Content, –¥–ª—è –º–µ–¥–∏–∞ - Caption
	if noteType == models.NoteTypeText {
		note.Content = userData.City
	} else {
		note.Caption = userData.City
		// –î–ª—è –º–µ–¥–∏–∞ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ Content –¥–ª—è –ø–æ–∏—Å–∫–∞
		note.Content = userData.City
	}

	log.Printf("Creating note: Type=%s, Content=%s, FileID=%s, CategoryID=%d",
		note.Type, note.Content, note.FileID, note.CategoryID)

	if err := database.CreateNote(note); err != nil {
		log.Printf("Error creating note from forwarded message: %v", err)
		h.msgHandler.sendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: "+err.Error(), CreateMainMenuKeyboard())
		h.storage.SetUserState(chatID, "")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
	successMsg := h.createSuccessMessage(note, category.Name)
	h.msgHandler.sendMessage(chatID, successMsg, CreateMainMenuKeyboard())
	h.storage.SetUserState(chatID, "")
}

func (h *NotesHandler) createSuccessMessage(note *models.Note, categoryName string) string {
	var successMsg string

	switch note.Type {
	case models.NoteTypeText:
		successMsg = fmt.Sprintf("‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é \"%s\"!\n\n%s", categoryName, note.Content)

	case models.NoteTypePhoto:
		successMsg = fmt.Sprintf("‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é \"%s\"!", categoryName)
		if note.Caption != "" {
			successMsg += "\n\nüìù " + note.Caption
		}
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
		go h.sendMediaPreview(note.TelegramID, note.FileID, "photo")

	case models.NoteTypeVideo:
		successMsg = fmt.Sprintf("‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é \"%s\"!", categoryName)
		if note.Caption != "" {
			successMsg += "\n\nüìù " + note.Caption
		}

	case models.NoteTypeVoice:
		successMsg = fmt.Sprintf("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é \"%s\"!", categoryName)
		if note.Caption != "" {
			successMsg += "\n\nüìù " + note.Caption
		}

	case models.NoteTypeFile:
		successMsg = fmt.Sprintf("‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é \"%s\"!", categoryName)
		if note.Caption != "" {
			successMsg += "\n\nüìù " + note.Caption
		}

	default:
		successMsg = fmt.Sprintf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é \"%s\"!", categoryName)
	}

	return successMsg
}

// sendMediaPreview –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞
func (h *NotesHandler) sendMediaPreview(chatID int64, fileID string, mediaType string) {
	switch mediaType {
	case "photo":
		photo := tgbotapi.NewPhoto(chatID, tgbotapi.FileID(fileID))
		photo.Caption = "üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ"
		_, err := h.bot.Send(photo)
		if err != nil {
			log.Printf("Error sending photo preview: %v", err)
		}
	case "video":
		video := tgbotapi.NewVideo(chatID, tgbotapi.FileID(fileID))
		video.Caption = "üé• –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ"
		_, err := h.bot.Send(video)
		if err != nil {
			log.Printf("Error sending video preview: %v", err)
		}
	}
}
